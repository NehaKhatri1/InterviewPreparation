
//package sparkStreamingSample;

        import org.apache.spark.SparkConf;
        import org.apache.spark.api.java.function.Function;
        import org.apache.spark.streaming.Durations;
        import org.apache.spark.streaming.api.java.JavaDStream;
        import org.apache.spark.streaming.api.java.JavaPairDStream;
        import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
        import org.apache.spark.streaming.api.java.JavaStreamingContext;

        import scala.Tuple2;

    /*

    Input given as :- on terminal

    [osboxes@quickstart-bigdata ExternalFiles]$ nc -lk 2399
ji
jaji
neha
how are you
good
neha so good to see you here
my luck
my luck

Output Produced :-  in every 10 seconds (window) on console

-------------------------------------------
Time: 1621429010000 ms
-------------------------------------------
(jaji welcome to home,1)
(ji welcome to home,1)


-------------------------------------------
Time: 1621429020000 ms
-------------------------------------------



-------------------------------------------
Time: 1621429030000 ms
-------------------------------------------


-------------------------------------------
Time: 1621429040000 ms
-------------------------------------------
(neha welcome to home,1)



-------------------------------------------
Time: 1621429050000 ms
-------------------------------------------
(how are you  welcome to home,1)
(good  welcome to home,1)


-------------------------------------------
Time: 1621430320000 ms
-------------------------------------------
(my luck welcome to home,2)



     */



public class streamingInJava8Sample {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        // spark-submit --class com.spark.streaming.SparkStreaming /home/cloudera/dev/runnableJars/Streaming.jar

        // Create a local StreamingContext with two working thread and batch interval of 1 second
        SparkConf conf = new SparkConf().setMaster("local[2]").setAppName("NetworkWord");
        JavaStreamingContext jssc = new JavaStreamingContext(conf, Durations.seconds(10));

        JavaReceiverInputDStream<String> lines = jssc.socketTextStream("localhost", 2399); // or 9999 both works

        /*
         * JavaDStream<String> words = lines.filter(new Function<String, Boolean>() {
         *
         * @Override public Boolean call(String v1) throws Exception { return v1.contains("abc"); }});
         */

        JavaDStream<String> concatenatedLines = lines.map(new Function<String, String>() {
            @Override
            public String call(String v1) throws Exception {
                return v1.concat(" welcome to home");
            }
        });

        // Count each word in each batch
        JavaPairDStream<String, Integer> pairsOfConcatenatedLinesAndOne= concatenatedLines.mapToPair(s -> new Tuple2<>(s, 1));  //pairsOfConcatenatedLinesAndOne =(how are you  welcome to home,1)
        JavaPairDStream<String, Integer> wordCounts = pairsOfConcatenatedLinesAndOne.reduceByKey((i1, i2) -> i1 + i2);

        // Print the first ten elements of each RDD generated in this DStream to the console
        wordCounts.print();

        jssc.start(); // Start the computation
        try {
            jssc.awaitTermination();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } // Wait for the computation to terminate

    }

}
